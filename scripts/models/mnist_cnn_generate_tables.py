# create tables from the pickle file generated by mnist_cnn.py
# vanilla_cnn_mnist_20231028205309.pkl

import pickle
import os
import sys
import pandas as pd

# Get the parent directory of the current script
current_dir = os.path.dirname(os.path.abspath(__file__))
# Add the parent directory to the module search path
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

# open the pickle file
with open('/home/daniel/git/ecai2023/vanilla_cnn_mnist_20231028205309.pkl', 'rb') as f:
    data = pickle.load(f)

# data is a dictionary with two keys, metadata and results
# we iterate over the results key, and get all the dictionary values
# for i in range(0, len(data['results'])):
#     for key, value in data['results'][i].items():
#         print(key, value)

results_df = pd.DataFrame(data['results'])  

# Extracting unique 'index' values from the results DataFrame
unique_indices = results_df['index'].unique()
unique_indices_df = pd.DataFrame(unique_indices + 1, columns=["Level"])

# Extracting unique noise_types
unique_noise_types = results_df['noise_type'].unique()

# Creating a DataFrame with 'Level' and unique noise_types as column headers
# Start with a DataFrame that has just the 'Level' column from the unique_indices_df
noise_types_df = unique_indices_df.copy()

# Add columns for each noise type, initializing with NaNs
for noise_type in unique_noise_types:
    noise_types_df[noise_type] = float('nan')

# Set the order of the columns with 'Level' as the first column
ordered_columns = ['Level'] + list(unique_noise_types)
noise_types_df = noise_types_df[ordered_columns]

# Populate the columns with the accuracy values for the corresponding noise_type and index
for index, row in results_df.iterrows():
    # The 'index' from the results_df corresponds to the 'Level' in our new DataFrame, with 1 added to it
    level = row['index'] + 1
    noise_type = row['noise_type']
    accuracy = row['accuracy']
    
    # Set the accuracy value in the correct place in the noise_types_df
    noise_types_df.loc[noise_types_df['Level'] == level, noise_type] = accuracy

noise_types_df
# write the dataframe to a csv file
noise_types_df.to_csv('vanilla_cnn_mnist_20231028205309.pkl.noise_types_df.csv', index=False)





